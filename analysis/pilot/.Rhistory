data$A1[i] - 1,
data$A3[i] - 1,
data$A5[i] - 1,
data$A7[i] - 1,
data$A9[i] - 1,
5 - data$A2[i],
5 - data$A4[i],
5 - data$A6[i],
5 - data$A8[i],
5 - data$A10[i]
) * 2.5
}
sus_means_subj <- tibble(
"Subject"       = 1:5,
"Nike"          = sus_nike_subj,
"adidas"        = sus_adidas_subj,
"Difference"    = sus_nike_subj - sus_adidas_subj
)
sus_means_subj
# Standard deviation of the difference of SUS mean scores
sd(sus_means_subj$Difference)
# t-test for significant difference testing - SUS per user
# Hypothesis: There is no significant difference in the means of the SUS score of the two apps
# t.text() takes two numerical vectors x,y as input
t.test(sus_means_subj$Nike, sus_means_subj$adidas, paired = T, alternative = "two.sided")
sd(sus_means_subj$Nike)
sd(sus_means_subj$adidas)
# DO NOT USE
# t-test for significant difference testing - SUS per item
# sus_means_item_adidas <- c(3.5,	6, 6, 6.5, 6, 7.5, 8, 7.5, 5.5, 8.5)
# sus_means_item_nike <- c(6.5, 6.5, 7, 7, 7, 7, 8, 8.5, 6.5, 8)
# t.test(sus_means_item_adidas, sus_means_item_nike, paired = T, alternative = "two.sided")
# t-test for task times
# Task 1
nike1_times <- data$TN1T[-2] %>% print
t.test(data$TA1T, data$TN1T, paired = T, alternative = "two.sided")
# Task 2
t.test(data$TA2T, data$TN2T, paired = T, alternative = "two.sided")
sus_means_subj
sus_means_subj <- tibble(
"Subject"       = 1:5,
"Nike"          = sus_nike_subj,
"adidas"        = sus_adidas_subj,
"Difference"    = sus_nike_subj - sus_adidas_subj
)
# SUS mean scores per subject
for (i in 1:length(data$Subj)) {
sus_nike_subj[i] <-  sum(
data$N1[i] - 1,
data$N3[i] - 1,
data$N5[i] - 1,
data$N7[i] - 1,
data$N9[i] - 1,
5 - data$N2[i],
5 - data$N4[i],
5 - data$N6[i],
5 - data$N8[i],
5 - data$N10[i]
) * 2.5
sus_adidas_subj[i] <- sum(
data$A1[i] - 1,
data$A3[i] - 1,
data$A5[i] - 1,
data$A7[i] - 1,
data$A9[i] - 1,
5 - data$A2[i],
5 - data$A4[i],
5 - data$A6[i],
5 - data$A8[i],
5 - data$A10[i]
) * 2.5
}
# ggsave() to export plot to image/svg/pdf
# package svglite may be required for saving to svg
# Mean SUS scores per subject & condition plot ----
means_plot <- sus_means_subj %>%
pivot_longer(
cols = 2:3,
names_to = "condition",
values_to = "mean_sus"
) %>%
arrange(mean_sus) %>%
ggplot(
mapping = aes(
x = condition,
y = mean_sus,
#color = condition
)
) +
labs(
title = "",
x = "App",
y = "Mean SUS score"
) +
ylim(25, 100) +
# geom_boxplot(
#     outlier.colour = "red",
#     outlier.shape = 8,
#     outlier.size = 4,
#     fill = "grey"
# ) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.8
)
means_plot
# Task 1 - mean times plot ----
ci_adidas1 <- qnorm(0.975)*(sd(data$TA1T)/sqrt(5))
ci_nike1 <- qnorm(0.975)*(sd(data$TN1T)/sqrt(5))
times_task1 <- tibble(
app = c("adidas Running", "Nike Run Club"),
mean_time = c(mean_A1, mean_N1),
ci = c(ci_adidas1, ci_nike1)
)
times_task1
plot_task1 <- ggplot(times_task1, aes(x=app, y=mean_time, fill=app)) +
geom_bar(
stat = "identity",
#color = "black",
position = position_dodge()
) +
geom_errorbar(
aes(ymin = mean_time - ci, ymax = mean_time + ci),
width = 0.3,
position = position_dodge(0.9)
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Paired") +
labs(
x = "",
y = "Mean time in s"
)
plot_task1
sd(data$TA1T)
Rmisc::CI(data$TA1T, ci = 0.95)
# Task 2 - mean times plot ----
ci_adidas2 <- qnorm(0.975)*(sd(data$TA2T)/sqrt(5))
ci_nike2 <- qnorm(0.975)*(sd(data$TN2T)/sqrt(5))
times_task2 <- tibble(
app = c("adidas Running", "Nike Run Club"),
mean_time = c(mean_A2, mean_N2),
ci = c(ci_adidas2, ci_nike2)
)
times_task2
plot_task2 <- ggplot(times_task2, aes(x=app, y=mean_time, fill=app)) +
geom_bar(
stat = "identity",
#color = "black",
position = position_dodge()
) +
geom_errorbar(
aes(ymin = mean_time - ci, ymax = mean_time + ci),
width = 0.3,
position = position_dodge(0.9)
) +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Paired") +
labs(
x = "",
y = "Mean time in s"
)
plot_task2
Rmisc::CI(data$TN2T, ci = 0.95)
# Extraction ----
ggsave("meantimestask1minimal.pdf", plot = plot_task1)
ggsave("meantimestask2minimal.pdf", plot = plot_task2)
knitr::opts_chunk$set(echo = TRUE)
# Loading libraries
library(tidyverse)
library(aida)
library(PropCIs)
# library(prevalence)
library(ggplot2)
data <- read_csv2('exp-study-results.csv')
data_tasktimes <- data %>%
select(Subj, TN1T, TN2T, TA1T, TA2T) %>%
pivot_longer(
cols = 2:5,
names_to = "task",
values_to = "time"
) %>%
print()
data_survey <- data %>%
select(Subj, N1:10, A1:10)
# Computation of geometric means of the task completion times
# Calculation by hand:
mean_N1a <- data$TN1T %>%
log() %>%
mean() %>%
exp() %>%
print()
# Function for computing the geometric mean:
gm_mean = function(a){prod(a)^(1/length(a))}
mean_N1 <- gm_mean(data$TN1T)
mean_N2 <- gm_mean(data$TN2T)
mean_A1 <- gm_mean(data$TA1T)
mean_A2 <- gm_mean(data$TA2T)
# 95% CIs using the t-distribution
# Standard deviations
sd(data$TN2T)
mean(data$TA1T)
# Overall score
sus_nike <-  sum(
data$N1 - 1,
data$N3 - 1,
data$N5 - 1,
data$N7 - 1,
data$N9 - 1,
5 - data$N2,
5 - data$N4,
5 - data$N6,
5 - data$N8,
5 - data$N10
) * 2.5 / 5
sus_adidas <- sum(
data$A1 - 1,
data$A3 - 1,
data$A5 - 1,
data$A7 - 1,
data$A9 - 1,
5 - data$A2,
5 - data$A4,
5 - data$A6,
5 - data$A8,
5 - data$A10
) * 2.5 / 5
# Output for printing
cat("SUS mean score Nike Run Club:", sus_nike, "\n")
cat("SUS mean score adidas Running:", sus_adidas)
# SUS mean scores by subject and app
sum(
sum(data$N1 - 1),
sum(data$N3 - 1),
sum(data$N5 - 1),
sum(data$N7 - 1),
sum(data$N9 - 1),
sum(5 - data$N2),
sum(5 - data$N4),
sum(5 - data$N6),
sum(5 - data$N8),
sum(5 - data$N10)
) *2.5 / 5
sum(data$N1 - 1) * 2.5 / 5
sum(5 - data$N2) * 2.5 / 5
# SUS mean scores per subject
for (i in 1:length(data$Subj)) {
sus_nike_subj[i] <-  sum(
data$N1[i] - 1,
data$N3[i] - 1,
data$N5[i] - 1,
data$N7[i] - 1,
data$N9[i] - 1,
5 - data$N2[i],
5 - data$N4[i],
5 - data$N6[i],
5 - data$N8[i],
5 - data$N10[i]
) * 2.5
sus_adidas_subj[i] <- sum(
data$A1[i] - 1,
data$A3[i] - 1,
data$A5[i] - 1,
data$A7[i] - 1,
data$A9[i] - 1,
5 - data$A2[i],
5 - data$A4[i],
5 - data$A6[i],
5 - data$A8[i],
5 - data$A10[i]
) * 2.5
}
sus_means_subj <- tibble(
"Subject"       = 1:5,
"Nike"          = sus_nike_subj,
"adidas"        = sus_adidas_subj,
"Difference"    = sus_nike_subj - sus_adidas_subj
)
sus_means_subj
# Standard deviation of the difference of SUS mean scores
sd(sus_means_subj$Difference)
# t-test for significant difference testing - SUS per user
# Hypothesis: There is no significant difference in the means of the SUS score of the two apps
# t.text() takes two numerical vectors x,y as input
t.test(sus_means_subj$Nike, sus_means_subj$adidas, paired = T, alternative = "two.sided")
sd(sus_means_subj$Nike)
sd(sus_means_subj$adidas)
# DO NOT USE
# t-test for significant difference testing - SUS per item
# sus_means_item_adidas <- c(3.5,	6, 6, 6.5, 6, 7.5, 8, 7.5, 5.5, 8.5)
# sus_means_item_nike <- c(6.5, 6.5, 7, 7, 7, 7, 8, 8.5, 6.5, 8)
# t.test(sus_means_item_adidas, sus_means_item_nike, paired = T, alternative = "two.sided")
# t-test for task times
# Task 1
nike1_times <- data$TN1T[-2] %>% print
t.test(data$TA1T, data$TN1T, paired = T, alternative = "two.sided")
# Task 2
t.test(data$TA2T, data$TN2T, paired = T, alternative = "two.sided")
# ggsave() to export plot to image/svg/pdf
# package svglite may be required for saving to svg
# Mean SUS scores per subject & condition plot ----
means_plot <- sus_means_subj %>%
pivot_longer(
cols = 2:3,
names_to = "condition",
values_to = "mean_sus"
) %>%
arrange(mean_sus) %>%
ggplot(
mapping = aes(
x = condition,
y = mean_sus,
#color = condition
)
) +
labs(
title = "",
x = "App",
y = "Mean SUS score"
) +
ylim(25, 100) +
# geom_boxplot(
#     outlier.colour = "red",
#     outlier.shape = 8,
#     outlier.size = 4,
#     fill = "grey"
# ) +
geom_dotplot(
binaxis = "y",
stackdir = "center",
dotsize = 0.8
)
means_plot
# Task 1 - mean times plot ----
ci_adidas1 <- qnorm(0.975)*(sd(data$TA1T)/sqrt(5))
ci_nike1 <- qnorm(0.975)*(sd(data$TN1T)/sqrt(5))
times_task1 <- tibble(
app = c("adidas Running", "Nike Run Club"),
mean_time = c(mean_A1, mean_N1),
ci = c(ci_adidas1, ci_nike1)
)
times_task1
plot_task1 <- ggplot(times_task1, aes(x=app, y=mean_time, fill=app)) +
geom_bar(
stat = "identity",
#color = "black",
position = position_dodge()
) +
geom_errorbar(
aes(ymin = mean_time - ci, ymax = mean_time + ci),
width = 0.3,
position = position_dodge(0.9)
) +
theme_classic() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Paired") +
labs(
x = "",
y = "Time in s"
) +
theme(
text = element_text(size=18)
)
plot_task1
sd(data$TA1T)
Rmisc::CI(data$TA1T, ci = 0.95)
# Task 2 - mean times plot ----
ci_adidas2 <- qnorm(0.975)*(sd(data$TA2T)/sqrt(5))
ci_nike2 <- qnorm(0.975)*(sd(data$TN2T)/sqrt(5))
times_task2 <- tibble(
app = c("adidas Running", "Nike Run Club"),
mean_time = c(mean_A2, mean_N2),
ci = c(ci_adidas2, ci_nike2)
)
times_task2
plot_task2 <- ggplot(times_task2, aes(x=app, y=mean_time, fill=app)) +
geom_bar(
stat = "identity",
#color = "black",
position = position_dodge()
) +
geom_errorbar(
aes(ymin = mean_time - ci, ymax = mean_time + ci),
width = 0.3,
position = position_dodge(0.9)
) +
theme_classic() +
theme(legend.position = "none") +
scale_fill_brewer(palette = "Paired") +
labs(
x = "",
y = "Time in s"
) +
theme(
text = element_text(size=18)
)
plot_task2
Rmisc::CI(data$TN2T, ci = 0.95)
# Extraction ----
ggsave("meantimestask1minimal.pdf", plot = plot_task1)
ggsave("meantimestask2minimal.pdf", plot = plot_task2)
combinedtimes <- ggpubr::ggarrange(plot_task1, plot_task2, labels = c("Task 1", "Task 2"), ncol = 2)
combinedtimes
ggsave("meantasktimesclassic.pdf", plot = combinedtimes)
# McNemar test for completion rates
# Task 1
m1 <- matrix(c(3,0,2,0), nrow = 2)
m1
# McNemar test for completion rates
# Task 1
m1 <- matrix(c(3,2,0,0), nrow = 2)
m1
mcnemar.test(m1)
mcnemar.test(m1, correct = T)
mcnemar.test(m1, correct = F)
# McNemar test for completion rates
# Task 1
m1 <- matrix(c(5,0,0,0), nrow = 2)
mcnemar.test(m1, correct = F)
m1
mcnemar.test(m1, correct = T)
# Task 2
m2 <- matrix(c(3,2,0,0), nrow = 2)
mcnemar.test(m2, correct = F)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
library(HDInterval)
options(mc.cores = parallel::detectCores())
set.seed(1702)
politedata = read_csv("https://tinyurl.com/polite-data")
head(politedata)
politedata = read_csv("https://tinyurl.com/polite-data")
head(politedata)
head(politedata)
head(politedata)
model_FE
model_FE <- brm(
formula = pitch ~ gender * context
data = politedata
model_FE <- brm(
formula = pitch ~ gender * context,
data = politedata,
seed = 1702
)
model_FE
model_FE <- brm(
formula = pitch ~ gender * context,
data = politedata,
seed = 1702
)
model_FE
model_FE
politedata = read_csv("https://tinyurl.com/polite-data")
head(politedata)
politedata = read_csv("https://tinyurl.com/polite-data")
# head(politedata)
post_samples = posterior_samples(model_FE)
mean(post_samples$b_contextpol > post_samples$b_genderM)
# Hypothesis: informal pitch is higher than polite pitch in women
mean(post_samples_FE$b_contextpol < 0)
post_samples_FE = posterior_samples(model_FE)
# Hypothesis: informal pitch is higher than polite pitch in women
mean(post_samples_FE$b_contextpol < 0)
# Hypothesis: informal male pitch is lower than polite female pitch
mean(post_samples_FE$b_contextpol > post_samples_FE$b_genderM)
source('~/Documents/GDrive/02 UNI/04 - SS21/Experimental Psychology Lab/conformity-xplab21/analysis/pilot/analysis.R', echo=TRUE)
# Filter out unusable data
usable_data <- filter(tidy_data,
# Control trial
understandingCheckResponse == 1,
topIssueRating != 5 | is.na(topIssueRating),
)
# Demographic summary
demographics_summary <- tidy_data %>%
summarise(
mean_age = mean(age),
min_age = min(age),
max_age = max(age),
sd_age = sd(age),
median_age = median(age),
num_males = sum(gender == 'männlich'),
N = length(age),
prop_female = (N-num_males) / N
)
#Frequentist Analysis----------------
ordinal_1 <- clm(as.factor(response)~ingroupNorm*bothShown, data=usable_data)
ordinal_1
source("functions/produce_mean_and_count_bar_plot.R")
plot_1 <- produce_mean_and_count_bar_plot(usable_data, bar_width_means=0.5, bar_width_response=0.3)
ggsave(file="plot_1.png", plot=plot_1, width=190, height = 110, units="mm")
#Bayesian analysis------------
#--Set up data for stan.
usable_data <- usable_data %>%
select(response, ingroupNorm, bothShown, ingroupAgree, outgroupDisagree) #select relevant columns
# Fit STAN data
stan_data <- as.list(c(usable_data, N = dim(usable_data)[1]))
stan_data
#--Fit models
fit_SCT <- stan(file = "stan_models/SCT.stan", data=stan_data, iter=10000, chains=4, seed = 123, control=list(adapt_delta = 0.99))
fit_herding <- stan(file = "stan_models/herding.stan", data=stan_data, iter=10000, chains=4, control=list(adapt_delta = 0.99))
#--Compare models using Bayes Factors
marg_lik_SCT <- bridge_sampler(samples = fit_SCT)
marg_lik_herding <- bridge_sampler(samples = fit_herding)
#--Compare models using Bayes Factors
marg_lik_SCT <- bridge_sampler(samples = fit_SCT)
marg_lik_herding <- bridge_sampler(samples = fit_herding)
bf(marg_lik_herding, marg_lik_SCT)
bf(marg_lik_herding, marg_lik_SCT)
fit_herding
