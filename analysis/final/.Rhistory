mutate(
condition = ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==0,
'Ingroup norm favoured \n leaving robber alone \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==0 & bothShown.dilemma==0,
'Ingroup norm favoured \n calling the police \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==1,
'Ingroup norm favoured \n leaving robber alone \n Both norms shown',
'Ingroup norm favoured \n calling the police \n Both norms shown'
))))
tidy_data
# Renaming column names to original variable names
colnames(tidy_data) <- c('age', 'gender', 'topIssue', 'topIssueRating', 'ingroupNorm',
'bothShown', 'ingroupFirst', 'response', 'rating',
'understandingCheckResponse', 'correct', 'identityIngroupResponse',
'identityOutgroupResponse', 'ingroupAgree', 'outgroupDisagree', 'condition')
tidy_data$responseLabels <- ordered(
tidy_data$response,
labels = c("1 = Definitely call the police", "2", "3", "4", "5", "6 = Definitely leave the robber alone")     )
# Filter out unusable data
usable_data <- filter(tidy_data,
# Control trial
understandingCheckResponse == 1,
topIssueRating != 5 | is.na(topIssueRating),
)
# Number of (usable) submissions
nr_subs <- tidy_data %>%
count() %>%
print()
nr_usable_subs <- usable_data %>%
count() %>%
print()
# Removals due to failure of understanding check OR indecisive issue rating
nr_removals <- nr_subs - nr_usable_subs
# Equal assignment of conditions
usable_data
cond <- usable_data %>%
count(ingroupNorm, bothShown) %>%
print()
prop_bothShown <- (count(usable_data) - count(usable_data[bothShown == 0])) / count(usable_data)
prop_bothShown
## Export to csv
write.csv(tidy_data,
file = '/Users/dhesenkamp/My Drive/02 UNI/04 - SS21/Experimental Psychology Lab/conformity-xplab21/analysis/final/tidy_data.csv',
row.names = TRUE)
write.csv(usable_data,
file = '/Users/dhesenkamp/My Drive/02 UNI/04 - SS21/Experimental Psychology Lab/conformity-xplab21/analysis/final/usable_data.csv',
row.names = TRUE)
# Demographic summary
demographics_data <- filter(usable_data,
# Use only submissions with demographic detail
is.na(age) == FALSE,
is_empty(gender) == F)
demographics_summary <- demographics_data %>%
summarise(
mean_age = mean(age),
min_age = min(age),
max_age = max(age),
sd_age = sd(age),
median_age = median(age),
num_males = sum(gender == 'm√§nnlich'),
N = length(age),
prop_female = (N-num_males) / N
)
demographics_summary
#Frequentist Analysis----------------
ordinal_1 <- clm(as.factor(response)~ingroupNorm*bothShown, data=usable_data)
ordinal_1
source("functions/produce_mean_and_count_bar_plot.R")
plot_1 <- produce_mean_and_count_bar_plot(usable_data, bar_width_means=0.5, bar_width_response=0.3)
ggsave(file="plot_1.png", plot=plot_1, width=190, height = 110, units="mm")
#Bayesian analysis------------
#--Set up data for STAN
usable_data <- usable_data %>%
select(response, ingroupNorm, bothShown, ingroupAgree, outgroupDisagree) #select relevant columns
# Fit STAN data
stan_data <- as.list(c(usable_data, N = dim(usable_data)[1]))
stan_data
#--Fit models
fit_SCT <- stan(file = "stan_models/SCT.stan", data=stan_data, iter=10000, chains=4, seed = 123, control=list(adapt_delta = 0.99))
fit_herding <- stan(file = "stan_models/herding.stan", data=stan_data, iter=10000, chains=4, control=list(adapt_delta = 0.99))
usable_data
tidy_data
usable_data
# Bring data in usable format
tidy_data <- full_data %>%
pivot_wider(
names_from = 'trial_name',
names_sep = '.',
values_from = c('submission_id', 'topIssue',	'topIssueRating', 'ingroupNorm',
'bothShown', 'ingroupFirst', 'response', 'rating', 'understandingCheckResponse',
'correct', 'identityIngroupResponse', 'identityOutgroupResponse', 'ingroupAgree',
'outgroupDisagree')
) %>%
as.data.table()
# Remove na columns resulting from pivoting, remove columns not needed for analysis
tidy_data[,which(unlist(lapply(tidy_data, function(x)!all(is.na(x))))),with=F]
tidy_data <- tidy_data %>%
select(where(function(x) any(!is.na(x))), -'comments', -'trial_number', -'startDate', -'startTime',
-'endTime', -'timeSpent', -'submission_id.issue_choice', -'submission_id.issue_rating',
-'submission_id.dilemma', -'submission_id.dilemma_rating', -'submission_id.control',
-'submission_id.group_identity', -'education', -'experiment_id') %>%
mutate(
condition = ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==0,
'Ingroup norm favoured \n leaving robber alone \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==0 & bothShown.dilemma==0,
'Ingroup norm favoured \n calling the police \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==1,
'Ingroup norm favoured \n leaving robber alone \n Both norms shown',
'Ingroup norm favoured \n calling the police \n Both norms shown'
))))
tidy_data
# Renaming column names to original variable names
colnames(tidy_data) <- c('age', 'gender', 'topIssue', 'topIssueRating', 'ingroupNorm',
'bothShown', 'ingroupFirst', 'response', 'rating',
'understandingCheckResponse', 'correct', 'identityIngroupResponse',
'identityOutgroupResponse', 'ingroupAgree', 'outgroupDisagree', 'condition')
tidy_data$responseLabels <- ordered(
tidy_data$response,
labels = c("1 = Definitely call the police", "2", "3", "4", "5", "6 = Definitely leave the robber alone")     )
# Filter out unusable data
usable_data <- filter(tidy_data,
# Control trial
understandingCheckResponse == 1,
topIssueRating != 5 | is.na(topIssueRating),
)
usable_data
# Bring data in usable format
tidy_data <- full_data %>%
pivot_wider(
names_from = 'trial_name',
names_sep = '.',
values_from = c('submission_id', 'topIssue',	'topIssueRating', 'ingroupNorm',
'bothShown', 'ingroupFirst', 'response', 'rating', 'understandingCheckResponse',
'correct', 'identityIngroupResponse', 'identityOutgroupResponse', 'ingroupAgree',
'outgroupDisagree')
) %>%
as.data.table()
# Remove na columns resulting from pivoting, remove columns not needed for analysis
tidy_data[,which(unlist(lapply(tidy_data, function(x)!all(is.na(x))))),with=F]
tidy_data <- tidy_data %>%
select(where(function(x) any(!is.na(x))), -'comments', -'trial_number', -'startDate', -'startTime',
-'endTime', -'timeSpent', -'submission_id.issue_choice', -'submission_id.issue_rating',
-'submission_id.dilemma', -'submission_id.dilemma_rating', -'submission_id.control',
-'submission_id.group_identity', -'education', -'language', -'experiment_id') %>%
mutate(
condition = ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==0,
'Ingroup norm favoured \n leaving robber alone \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==0 & bothShown.dilemma==0,
'Ingroup norm favoured \n calling the police \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==1,
'Ingroup norm favoured \n leaving robber alone \n Both norms shown',
'Ingroup norm favoured \n calling the police \n Both norms shown'
))))
tidy_data
# Renaming column names to original variable names
colnames(tidy_data) <- c('age', 'gender', 'topIssue', 'topIssueRating', 'ingroupNorm',
'bothShown', 'ingroupFirst', 'response', 'rating',
'understandingCheckResponse', 'correct', 'identityIngroupResponse',
'identityOutgroupResponse', 'ingroupAgree', 'outgroupDisagree', 'condition')
tidy_data$responseLabels <- ordered(
tidy_data$response,
labels = c("1 = Definitely call the police", "2", "3", "4", "5", "6 = Definitely leave the robber alone")     )
# Filter out unusable data
usable_data <- filter(tidy_data,
# Control trial
understandingCheckResponse == 1,
topIssueRating != 5 | is.na(topIssueRating),
)
usable_data
tidy_data
# Set working directory (getwd() to check, change to own respective local directory)
getwd()
setwd('/Users/dhesenkamp/My Drive/02 UNI/04 - SS21/Experimental Psychology Lab/conformity-xplab21/analysis/final')
# Read in data
full_data <- read.csv('results.csv', sep=';', header=TRUE)
# Bring data in usable format
tidy_data <- full_data %>%
pivot_wider(
names_from = 'trial_name',
names_sep = '.',
values_from = c('submission_id', 'topIssue',	'topIssueRating', 'ingroupNorm',
'bothShown', 'ingroupFirst', 'response', 'rating', 'understandingCheckResponse',
'correct', 'identityIngroupResponse', 'identityOutgroupResponse', 'ingroupAgree',
'outgroupDisagree')
) %>%
as.data.table()
# Remove na columns resulting from pivoting, remove columns not needed for analysis
tidy_data[,which(unlist(lapply(tidy_data, function(x)!all(is.na(x))))),with=F]
tidy_data <- tidy_data %>%
select(where(function(x) any(!is.na(x))), -'comments', -'trial_number', -'startDate', -'startTime',
-'endTime', -'timeSpent', -'submission_id.issue_choice', -'submission_id.issue_rating',
-'submission_id.dilemma', -'submission_id.dilemma_rating', -'submission_id.control',
-'submission_id.group_identity', -'education', -'language', -'experiment_id') %>%
mutate(
condition = ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==0,
'Ingroup norm favoured \n leaving robber alone \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==0 & bothShown.dilemma==0,
'Ingroup norm favoured \n calling the police \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==1,
'Ingroup norm favoured \n leaving robber alone \n Both norms shown',
'Ingroup norm favoured \n calling the police \n Both norms shown'
))))
tidy_data
tidy_data <- tidy_data %>%
select(where(function(x) any(!is.na(x))), -'comments', -'trial_number', -'startDate', -'startTime',
-'endTime', -'timeSpent', -'submission_id.issue_choice', -'submission_id.issue_rating',
-'submission_id.dilemma', -'submission_id.dilemma_rating', -'submission_id.control',
-'submission_id.group_identity', -'education', -'language', -'experiment_id') %>%
mutate(
condition = ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==0,
'Ingroup norm favoured \n leaving robber alone \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==0 & bothShown.dilemma==0,
'Ingroup norm favoured \n calling the police \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==1,
'Ingroup norm favoured \n leaving robber alone \n Both norms shown',
'Ingroup norm favoured \n calling the police \n Both norms shown'
))))
tidy_data <- tidy_data %>%
select(where(function(x) any(!is.na(x))), -'comments', -'trial_number', -'startDate', -'startTime',
-'endTime', -'timeSpent', -'submission_id.issue_choice', -'submission_id.issue_rating',
-'submission_id.dilemma', -'submission_id.dilemma_rating', -'submission_id.control',
-'submission_id.group_identity', -'education', -'languages', -'experiment_id') %>%
mutate(
condition = ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==0,
'Ingroup norm favoured \n leaving robber alone \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==0 & bothShown.dilemma==0,
'Ingroup norm favoured \n calling the police \n Only ingroup norm shown',
ifelse(
ingroupNorm.dilemma==1 & bothShown.dilemma==1,
'Ingroup norm favoured \n leaving robber alone \n Both norms shown',
'Ingroup norm favoured \n calling the police \n Both norms shown'
))))
tidy_data
# Renaming column names to original variable names
colnames(tidy_data) <- c('age', 'gender', 'topIssue', 'topIssueRating', 'ingroupNorm',
'bothShown', 'ingroupFirst', 'response', 'rating',
'understandingCheckResponse', 'correct', 'identityIngroupResponse',
'identityOutgroupResponse', 'ingroupAgree', 'outgroupDisagree', 'condition')
# Renaming column names to original variable names
colnames(tidy_data) <- c('age', 'gender', 'topIssue', 'topIssueRating', 'ingroupNorm',
'bothShown', 'ingroupFirst', 'response', 'rating',
'understandingCheckResponse', 'correct', 'identityIngroupResponse',
'identityOutgroupResponse', 'ingroupAgree', 'outgroupDisagree', 'condition')
tidy_data$responseLabels <- ordered(
tidy_data$response,
labels = c("1 = Definitely call the police", "2", "3", "4", "5", "6 = Definitely leave the robber alone")     )
tidy_data
# Filter out unusable data
usable_data <- filter(tidy_data,
# Control trial
understandingCheckResponse == 1,
topIssueRating != 5 | is.na(topIssueRating),
)
usable_data
climate <- usable_data %>%
count(topIssue == 1) %>%
print()
abortion <- usable_data %>%
count(topIssue == 7) %>%
print()
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.15) +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.15) +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.15, show.legend = T) +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.15, show.legend = F) +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot.png", issue_plot, width=34, height=13, units="cm")
ggsave("issue_plot1.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.15, show.legend = T) +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot2.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "centerwhole", binwidth = 0.15,) +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot2.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.1,) +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot2.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.2,) +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot2.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.15, position = 'dodge') +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot2.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.15, method='dotdensity') +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot2.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "center", binwidth = 0.15, method='histodot') +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot2.png", issue_plot, width=34, height=13, units="cm")
# Plot which issues people cared about and the extent to which they agreed with them
issue_plot <- ggplot(usable_data, aes(x=factor(topIssue,labels = c("Climate \npolicy",
"Migration \npolicy",
"Feminism",
"Cannabis \nlegalisation",
"Pension \nage",
#"Education", # this topic wasn't chosen at all
"Abortion",
"Meat \nconsumption")),
y = topIssueRating,
colour = factor(topIssue),
fill = factor(topIssue))) +
geom_dotplot(binaxis = "y", stackdir = "up", binwidth = 0.15, method='histodot') +
labs(x = "Issue", y="Agreement") +
guides(color=FALSE, fill=FALSE) +
scale_y_continuous(breaks=c(0,5,10), labels = c("Strongly disagree", "Neutral", "Strongly agree"))
ggsave("issue_plot2.png", issue_plot, width=34, height=13, units="cm")
# Removals due to failure of understanding check OR indecisive issue rating
nr_removals <- nr_subs - nr_usable_subs %>%
print()
prop_bothShown <- (count(usable_data) - count(usable_data[bothShown == 0])) / count(usable_data) %>%
print()
# Equal assignment of conditions
cond <- usable_data %>%
count(ingroupNorm, bothShown) %>%
print()
prop_bothShown <- (count(usable_data) - count(usable_data[bothShown == 0])) / count(usable_data) %>%
print()
prop_bothShown <- (count(usable_data) - count(usable_data[bothShown == 0])) / count(usable_data) %>%
prop_bothShown
prop_bothShown <- (count(usable_data) - count(usable_data[bothShown == 0])) / count(usable_data)
prop_bothShown
prop_bothShown <- ((count(usable_data) - count(usable_data[bothShown == 0])) / count(usable_data)) %>%
print()
# Number of (usable) submissions
nr_subs <- tidy_data %>%
count() %>%
print()
nr_usable_subs <- usable_data %>%
count() %>%
print()
# Equal assignment of conditions
cond <- usable_data %>%
count(ingroupNorm, bothShown) %>%
print()
demographics_summary
# Fit models
fit_SCT <- stan(file = "stan_models/SCT.stan", data=stan_data, iter=10000, chains=4, seed = 123, control=list(adapt_delta = 0.99))
